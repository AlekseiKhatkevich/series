# Generated by Django 3.0.5 on 2020-05-02 12:30

import archives.helpers.custom_fields
import archives.helpers.file_uploads
import archives.helpers.validators
from django.conf import settings
import django.contrib.postgres.fields.jsonb
import django.core.validators
from django.db import migrations, models
import django.db.models.deletion
import django.db.models.expressions


class Migration(migrations.Migration):

    #replaces = [('archives', '0001_squashed_0010_auto_20200424_1324'), ('archives', '0011_auto_20200424_1418'), ('archives', '0012_auto_20200424_1447'), ('archives', '0013_auto_20200424_1604'), ('archives', '0014_auto_20200426_0954'), ('archives', '0015_auto_20200426_1624'), ('archives', '0016_auto_20200427_0942'), ('archives', '0017_auto_20200427_1046'), ('archives', '0018_auto_20200427_1439'), ('archives', '0019_auto_20200428_1345'), ('archives', '0020_auto_20200501_1230'), ('archives', '0021_auto_20200501_1255'), ('archives', '0022_auto_20200501_1323'), ('archives', '0023_auto_20200501_1332'), ('archives', '0024_auto_20200501_1358'), ('archives', '0025_auto_20200502_1452')]

    initial = True

    dependencies = [
        ('contenttypes', '0002_remove_content_type_name'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='TvSeriesModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50, unique=True, verbose_name='Name of the series')),
                ('imdb_url', models.URLField(unique=True, verbose_name='IMDB page for the series')),
                ('entry_author', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='series', to=settings.AUTH_USER_MODEL, verbose_name='Author of the series entry')),
                ('is_finished', models.BooleanField(default=False, verbose_name='Whether series finished or not')),
                ('rating', models.PositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], null=True, validators=[django.core.validators.MinValueValidator(limit_value=1, message='Zero is not a valid integer for this field')], verbose_name='Rating of TV series from 1 to 10')),
            ],
            options={
                'verbose_name': 'series',
                'verbose_name_plural': 'series',
            },
        ),
        migrations.CreateModel(
            name='ImageModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('image', models.ImageField(upload_to=archives.helpers.file_uploads.save_image_path, verbose_name='An image')),
                ('object_id', models.PositiveIntegerField()),
                ('content_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='contenttypes.ContentType')),
            ],
            options={
                'verbose_name': 'Image',
                'verbose_name_plural': 'Images',
            },
        ),
        migrations.CreateModel(
            name='GroupingModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('reason_for_interrelationship', models.TextField(null=True, verbose_name='Reason for relationship to an another series.')),
                ('from_series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='archives.TvSeriesModel')),
                ('to_series', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='+', to='archives.TvSeriesModel')),
            ],
        ),
        migrations.AddField(
            model_name='tvseriesmodel',
            name='interrelationship',
            field=models.ManyToManyField(related_name='_tvseriesmodel_interrelationship_+', through='archives.GroupingModel', to='archives.TvSeriesModel'),
        ),
        migrations.AlterField(
            model_name='groupingmodel',
            name='from_series',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='group', to='archives.TvSeriesModel'),
        ),
        migrations.CreateModel(
            name='SeasonModel',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('series', models.ForeignKey(on_delete=django.db.models.deletion.PROTECT, related_name='seasons', to='archives.TvSeriesModel', verbose_name='Parent TV series')),
                ('last_watched_episode', models.PositiveSmallIntegerField(null=True, validators=[archives.helpers.validators.skip_if_none_none_zero_positive_validator], verbose_name='Last watched episode of a current season')),
                ('season_number', models.PositiveSmallIntegerField(default=1, validators=[django.core.validators.MinValueValidator(limit_value=1, message='Zero is not a valid integer for this field')], verbose_name='Number of the current season')),
                ('number_of_episodes', models.PositiveSmallIntegerField(validators=[django.core.validators.MinValueValidator(limit_value=1, message='Zero is not a valid integer for this field')], verbose_name='Number of episodes in the current season')),
                ('episodes', django.contrib.postgres.fields.jsonb.JSONField(null=True, validators=[archives.helpers.validators.validate_dict_key_is_digit, archives.helpers.validators.validate_timestamp], verbose_name='Episode number and issue date')),
            ],
            options={
                'verbose_name': 'Season',
                'verbose_name_plural': 'Seasons',
                'unique_together': {('series', 'season_number')},
                'index_together': {('series', 'season_number')},
                'order_with_respect_to': 'series',
            },
        ),
        migrations.AddConstraint(
            model_name='seasonmodel',
            constraint=models.CheckConstraint(check=models.Q(models.Q(('last_watched_episode__gte', 1), ('last_watched_episode__isnull', True), _connector='OR'), ('number_of_episodes__gte', 1)), name='last_watched_episode_and_number_of_episodes_are_gte_one'),
        ),
        migrations.AddConstraint(
            model_name='tvseriesmodel',
            constraint=models.CheckConstraint(check=models.Q(('rating__range', (1, 11)), ('rating__isnull', True), _connector='OR'), name='rating_from_1_to_10'),
        ),
        migrations.AddConstraint(
            model_name='seasonmodel',
            constraint=models.CheckConstraint(check=models.Q(number_of_episodes__gte=django.db.models.expressions.F('last_watched_episode')), name='mutual_watched_episode_and_number_of_episodes_check'),
        ),
        migrations.AlterField(
            model_name='seasonmodel',
            name='episodes',
            field=archives.helpers.custom_fields.CustomJSONField(null=True, validators=[archives.helpers.validators.validate_dict_key_is_digit, archives.helpers.validators.validate_timestamp], verbose_name='Episode number and issue date'),
        ),
        migrations.AddConstraint(
            model_name='seasonmodel',
            constraint=models.CheckConstraint(check=models.Q(season_number__gte=1), name='season_number_gte_1_check'),
        ),
        migrations.AlterField(
            model_name='seasonmodel',
            name='last_watched_episode',
            field=archives.helpers.custom_fields.CustomPositiveSmallIntegerField(null=True, validators=[archives.helpers.validators.skip_if_none_none_zero_positive_validator], verbose_name='Last watched episode of a current season'),
        ),
        migrations.AlterField(
            model_name='tvseriesmodel',
            name='rating',
            field=archives.helpers.custom_fields.CustomPositiveSmallIntegerField(choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10)], null=True, validators=[django.core.validators.MinValueValidator(limit_value=1, message='Zero is not a valid integer for this field')], verbose_name='Rating of TV series from 1 to 10'),
        ),
        migrations.AlterField(
            model_name='tvseriesmodel',
            name='rating',
            field=archives.helpers.custom_fields.CustomPositiveSmallIntegerField(null=True, validators=[django.core.validators.MinValueValidator(limit_value=1, message='Zero is not a valid integer for this field')], verbose_name='Rating of TV series from 1 to 10'),
        ),
        migrations.AlterField(
            model_name='tvseriesmodel',
            name='rating',
            field=models.SmallIntegerField(blank=True, null=True, validators=[django.core.validators.MinValueValidator(limit_value=1, message='Zero is not a valid integer for this field')], verbose_name='Rating of TV series from 1 to 10'),
        ),
        migrations.AlterField(
            model_name='tvseriesmodel',
            name='rating',
            field=models.SmallIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (None, 'No rating given')], null=True, validators=[django.core.validators.MinValueValidator(limit_value=1, message='Zero is not a valid integer for this field')], verbose_name='Rating of TV series from 1 to 10'),
        ),
        migrations.AlterField(
            model_name='tvseriesmodel',
            name='rating',
            field=models.PositiveSmallIntegerField(blank=True, choices=[(1, 1), (2, 2), (3, 3), (4, 4), (5, 5), (6, 6), (7, 7), (8, 8), (9, 9), (10, 10), (None, 'No rating given')], null=True, validators=[django.core.validators.MinValueValidator(limit_value=1, message='Zero is not a valid integer for this field')], verbose_name='Rating of TV series from 1 to 10'),
        ),
        migrations.AlterField(
            model_name='tvseriesmodel',
            name='imdb_url',
            field=models.URLField(unique=True, validators=[archives.helpers.validators.ValidateUrlDomain('www.imdb.com')], verbose_name='IMDB page for the series'),
        ),
    ]
