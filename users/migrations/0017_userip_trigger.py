# Generated by Django 3.1 on 2020-08-06 17:15

from django.db import migrations, models

from users.database_functions import IpCount
from users.models import UserIP


class Migration(migrations.Migration):
    db_table_name = UserIP._meta.db_table
    max_ip_count = 3
    trigger_name = 'max_3_ips'
    function_name = 'enforce_ip_count'

    dependencies = [
        ('users', '0016_max_3_ips_function'),
    ]

    operations = [
        migrations.RunSQL(sql=
                          f"""
                            CREATE OR REPLACE FUNCTION {function_name}() RETURNS trigger AS $$
                            DECLARE
                                max_ip_count INTEGER := 3;
                                ip_count INTEGER := 0;
                                must_check BOOLEAN := false;
                            BEGIN
                                IF TG_OP = 'INSERT' THEN
                                    must_check := true;
                                END IF;
                            
                                IF TG_OP = 'UPDATE' THEN
                                    IF (NEW.user_id != OLD.user_id) THEN
                                        must_check := true;
                                    END IF;
                                END IF;
                            
                                IF must_check THEN
                                    -- prevent concurrent inserts from multiple transactions
                                    LOCK TABLE {db_table_name} IN EXCLUSIVE MODE;
                            
                                    SELECT INTO ip_count COUNT(*)
                                    FROM {db_table_name}
                                    WHERE user_id = NEW.user_id;
                            
                                    IF ip_count > max_ip_count THEN
                                        RAISE EXCEPTION 'Cannot insert more than % ips for each user.', max_ip_count;
                                    END IF;
                                END IF;
                            
                                RETURN NEW;
                            END;
                            $$ LANGUAGE plpgsql;    

                                """
                          ,
                          reverse_sql=
                          f"""drop function if exists {function_name} cascade"""
                          ),

        migrations.RunSQL(sql=
                          f"""
                            CREATE TRIGGER {trigger_name}
                            AFTER INSERT OR UPDATE ON {db_table_name}
                            FOR EACH ROW EXECUTE PROCEDURE {function_name}();
                            """
                          ,
                          reverse_sql=
                          f"""
                            DROP TRIGGER IF EXISTS {trigger_name}  
                            ON {db_table_name};
                            """,
                          state_operations=[
                              migrations.AddConstraint(
                                  model_name='userip',
                                  constraint=models.CheckConstraint(
                                      check=IpCount(
                                          models.expressions.F('user_id'),
                                          models.expressions.Value(3)
                                      ),
                                      name='max_3_ips'),
                              ), ]
                          ), ]
